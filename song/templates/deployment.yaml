apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "song.server.fullname" . }}
  labels:
    app: {{ include "song.name" . }}
    chart: {{ include "song.chart" . }}
    component: "server"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "song.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "song.name" . }}
        release: {{ .Release.Name }}
        component: "server"
    spec:
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
{{- if .Values.backup.enabled }}
        - name: song-db-backup
          image: "{{ .Values.backupImage.repository }}:{{ .Values.backupImage.tag }}"
          imagePullPolicy: {{ .Values.backupImage.pullPolicy }}
          env:
            - name: BACKUP_CRONSCHEDULE
              value: {{ .Values.backup.schedule | quote }}
            - name: BACKUP_PREFIX
              value: "{{ .Values.backup.prefix }}_{{ .Values.image.tag }}"
            - name: BACKUP_AUTOCREATEBUCKET
              value: {{ .Values.backup.autoCreateBucket | quote }}
            - name: BACKUP_PGDUMPEXEPATH
              value: "/usr/bin/pg_dump"
            - name: S3_ACCESSKEY
              value: {{ .Values.backup.s3.accessKey }}
            - name: S3_SECRETKEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "song.fullname" . }}
                  key: s3-secretKey
            - name: S3_BUCKETNAME
              value: {{ .Values.backup.s3.bucketName }}
            - name: S3_BUCKETPATH
              value: {{ .Values.backup.s3.bucketPath }}
            - name: S3_ENDPOINTURL
              value: {{ .Values.backup.s3.endpointUrl }}
            - name: DB_NAME
              value: {{ .Values.postgres.postgresDb }}
            - name: DB_HOST
              value: {{ template "song.fullname" . }}-postgres
            - name: DB_PORT
              value: "5432"
            - name: DB_USER
              value: {{ .Values.postgres.postgresUsername }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "song.fullname" . }}-postgres
                  key: postgres-password
{{- end }}
        - name: song-server
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.appConfig.profiles }}
            - name: AUTH_SERVER_URL
              value: {{ .Values.appConfig.auth.server.url }}
            - name: AUTH_SERVER_TOKENNAME
              value: {{ .Values.appConfig.auth.server.tokenName }}
            - name: AUTH_SERVER_CLIENTID
              value: {{ .Values.appConfig.auth.server.clientID }}
            - name: AUTH_SERVER_CLIENTSECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "song.fullname" . }}
                  key: auth-server-client-secret
            - name: AUTH_SERVER_SCOPE_STUDY_PREFIX
              value: {{ .Values.appConfig.auth.server.scope.study.prefix }}
            - name: AUTH_SERVER_SCOPE_STUDY_SUFFIX
              value: {{ .Values.appConfig.auth.server.scope.study.suffix }}
            - name: AUTH_SERVER_SCOPE_SYSTEM
              value: {{ .Values.appConfig.auth.server.scope.system }}
            - name: ID_USELOCAL
              value: {{ .Values.appConfig.id.useLocal | quote }}
            - name: ID_FEDERATED_AUTH_BEARER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ template "song.fullname" . }}
                  key: id-authtoken
            - name: ID_FEDERATED_URITEMPLATE_DONOR
              value: {{ .Values.appConfig.id.federated.uriTemplate.donor }}
            - name: ID_FEDERATED_URITEMPLATE_SPECIMEN
              value: {{ .Values.appConfig.id.federated.uriTemplate.specimen }}
            - name: ID_FEDERATED_URITEMPLATE_SAMPLE
              value: {{ .Values.appConfig.id.federated.uriTemplate.sample }}
            - name: SCORE_URL
              value: {{ .Values.appConfig.score.url }}
            - name: SCORE_ACCESSTOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ template "song.fullname" . }}
                  key: score-accessToken
            {{- if (contains "score-client-cred" .Values.appConfig.profiles) }}
            - name: SCORE_CLIENTCREDENTIALS_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "song.fullname" . }}
                  key: score-clientCredentials-secret
            - name: SCORE_CLIENTCREDENTIALS_ID
              value: {{ .Values.appConfig.score.clientCredentials.id }}
            - name: SCORE_CLIENTCREDENTIALS_TOKENURL
              value: {{ .Values.appConfig.score.clientCredentials.tokenUrl }}
            - name: SCORE_CLIENTCREDENTIALS_SYSTEMSCOPE
              value: {{ .Values.appConfig.score.clientCredentials.systemScope }}
            {{- end }}
            - name: SPRING_FLYWAY_ENABLED
              value: {{ .Values.appConfig.flyway.enabled | quote }}
            - name: SPRING_FLYWAY_LOCATIONS
              value: {{ .Values.appConfig.flyway.locations}}
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://{{ template "song.fullname" . }}-postgres:5432/{{ .Values.postgres.postgresDb }}?stringtype=unspecified
            - name: SPRING_DATASOURCE_USERNAME
              value: {{ .Values.postgres.postgresUsername }}
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "song.fullname" . }}-postgres
                  key: postgres-password
{{- if .Values.appConfig.auth.jwt.enable }}
            - name: AUTH_JWT_PUBLICKEYURL
              value: {{ .Values.appConfig.auth.jwt.publicKeyUrl }}
{{- end }}

{{- if .Values.extraEnv }}
  {{ range $key, $value := .Values.extraEnv }}
            - name: {{ $key }}
              value: {{ $value | quote }}
  {{- end }}
{{- end }}
          ports:
            - containerPort: 8080
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: 8080
          readinessProbe:
            httpGet:
              path: /swagger-ui.html
              port: 8080
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
